// Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights
// reserved. See file COPYRIGHT for details.
//
// This file is part of the MFEM library. For more information and source code
// availability see http://mfem.org.
//
// MFEM is free software; you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License (as published by the Free
// Software Foundation) version 2.1 dated February 1999.

#include <sstream>
#include <iomanip>
#include <algorithm>
#include <stdexcept>

#include "../general/dynheap.hpp"
#include "gecko.hpp"

using namespace std;

namespace gecko
{

// Node in a subgraph.
class Subnode
{
public:
   typedef unsigned char Index;
   Float pos;        // node position
   WeightedSum cost; // external cost at this position
};

class Subgraph
{
public:
   Subgraph(Graph* g, uint n);
   ~Subgraph() { delete[] cache; }
   void Optimize(uint k);

private:
   Graph* const g;                        // full graph
   const uint n;                          // number of subgraph nodes
   Functional* const f;                   // ordering functional
   WeightedSum min;                       // minimum cost so far
   Subnode::Index best[GECKO_WINDOW_MAX]; // best permutation so far
   Subnode::Index perm[GECKO_WINDOW_MAX]; // current permutation
   const Subnode* node[GECKO_WINDOW_MAX]; // pointers to precomputed nodes
   Subnode* cache;                        // precomputed node positions and costs
#if GECKO_SUBGRAPH_ADJLIST
   Subnode::Index
   adj[GECKO_WINDOW_MAX][GECKO_WINDOW_MAX]; // internal adjacency list
#else
   uint adj[GECKO_WINDOW_MAX];            // internal adjacency matrix
#endif
   Float weight[GECKO_WINDOW_MAX][GECKO_WINDOW_MAX]; // internal arc weights
   WeightedSum Cost(uint k) const;
   void Swap(uint k);
   void Swap(uint k, uint l);
   void Optimize(WeightedSum c, uint i);
};

// Constructor.
Subgraph::Subgraph(Graph* g, uint n) : g(g), n(n), f(g->functional)
{
   if (n > GECKO_WINDOW_MAX)
   {
      throw std::out_of_range("optimization window too large");
   }
   cache = new Subnode[n << n];
}

// Cost of k'th node's edges to external nodes and nodes at {k+1, ..., n-1}.
WeightedSum Subgraph::Cost(uint k) const
{
   Subnode::Index i = perm[k];
   WeightedSum c = node[i]->cost;
   Float p = node[i]->pos;
#if GECKO_ADJLIST
   for (k = 0; adj[i][k] != i; k++)
   {
      Subnode::Index j = adj[i][k];
      Float l = node[j]->pos - p;
      if (l > 0)
      {
         Float w = weight[i][k];
         f->accumulate(c, WeightedValue(l, w));
      }
   }
#else
   uint m = adj[i];
   while (++k < n)
   {
      Subnode::Index j = perm[k];
      if (m & (1u << j))
      {
         Float l = node[j]->pos - p;
         Float w = weight[i][j];
         f->Accumulate(c, WeightedValue(l, w));
      }
   }
#endif
   return c;
}

// Swap the two nodes in positions k and k + 1.
void Subgraph::Swap(uint k)
{
   uint l = k + 1;
   Subnode::Index i = perm[k];
   Subnode::Index j = perm[l];
   perm[k] = j;
   perm[l] = i;
   node[i] -= 1u << j;
   node[j] += 1u << i;
}

// Swap the two nodes in positions k and l, k <= l.
void Subgraph::Swap(uint k, uint l)
{
   Subnode::Index i = perm[k];
   Subnode::Index j = perm[l];
   perm[k] = j;
   perm[l] = i;
   // Update node positions.
   uint m = 0;
   while (++k < l)
   {
      Subnode::Index h = perm[k];
      node[h] += 1u << i;
      node[h] -= 1u << j;
      m += 1u << h;
   }
   node[i] -= (1u << j) + m;
   node[j] += (1u << i) + m;
}

#if GECKO_NONRECURSIVE
// Evaluate all permutations generated by Heap's nonrecursive algorithm.
void Subgraph::Optimize()
{
   WeightedSum c[GECKO_WINDOW_MAX + 1];
   uint j[GECKO_WINDOW_MAX + 1];
   Float min = FLOAT_MAX;
   j[n] = 1;
   c[n] = 0;
   uint i = n;
   do
   {
      i--;
      j[i] = i;
   loop:
      c[i] = f->Sum(c[i + 1], cost(i));
   }
   while (i);
   if (f->Less(*c, min))
   {
      min = *c;
      for (uint k = 0; k < n; k++)
      {
         best[k] = perm[k];
      }
   }
   do
   {
      if (++i == n)
      {
         return;
      }
      swap(i & 1 ? i - j[i] : 0, i);
   }
   while (!j[i]--);
   goto loop;
}
#else
// Apply branch-and-bound to permutations generated by Heap's algorithm.
void Subgraph::Optimize(WeightedSum c, uint i)
{
   i--;
   if (f->Less(c, min))
   {
      if (i)
      {
         uint j = i;
         do
         {
            Optimize(f->Sum(c, Cost(i)), i);
            Swap(i & 1 ? i - j : 0, i);
         }
         while (j--);
      }
      else
      {
         f->Accumulate(c, Cost(0));
         if (f->Less(c, min))
         {
            min = c;
            for (uint j = 0; j < n; j++)
            {
               best[j] = perm[j];
            }
         }
      }
   }
   else if (i & 1)
   {
      do { Swap(--i); }
      while (i);
   }
}
#endif

// Optimize layout of nodes {p, ..., p + n - 1}.
void Subgraph::Optimize(uint p)
{
   // Initialize subgraph.
   const Float q = g->node[g->perm[p]].pos - g->node[g->perm[p]].hlen;
   min = WeightedSum(GECKO_FLOAT_MAX, 1);
   for (Subnode::Index k = 0; k < n; k++)
   {
      best[k] = perm[k] = k;
      Node::Index i = g->perm[p + k];
      // Copy i's outgoing arcs.  We distinguish between internal
      // and external arcs to nodes within and outside the subgraph,
      // respectively.
#if GECKO_ADJLIST
      uint m = 0;
#else
      adj[k] = 0;
#endif
      std::vector<Arc::Index> external;
      for (Arc::Index a = g->begin(i); a < g->end(i); a++)
      {
         Node::Index j = g->adj[a];
         Subnode::Index l;
         for (l = 0; l < n && g->perm[p + l] != j; l++);
         if (l == n)
         {
            external.push_back(a);
         }
         else
         {
            // Copy internal arc to subgraph.
#if GECKO_ADJLIST
            adj[k][m] = l;
            weight[k][m] = g->weight[a];
            m++;
#else
            adj[k] += 1u << l;
            weight[k][l] = g->weight[a];
#endif
         }
      }
#if GECKO_ADJLIST
      adj[k][m] = k;
#endif
      // Precompute external costs associated with all possible positions
      // of this node.  Since node lengths can be arbitrary, there are as
      // many as 2^(n-1) possible positions, each corresponding to an
      // (n-1)-bit string that specifies whether the remaining n-1 nodes
      // succeed this node or not.  Caching the
      //                n
      //   2^(n-1) n = sum k C(n, k) = A001787
      //               k=1
      // external costs is exponentially cheaper than recomputing the
      //      n-1         n
      //   n! sum 1/k! = sum k! C(n, k) = A007526
      //      k=0        k=1
      // costs associated with all permutations.
      node[k] = cache + (k << n);
      for (uint m = 0; m < (1u << n); m++)
      {
         if (!(m & (1u << k)))
         {
            Subnode* s = cache + (k << n) + m;
            s->pos = q + g->node[i].hlen;
            for (Subnode::Index l = 0; l < n; l++)
            {
               if (l != k && !(m & (1u << l)))
               {
                  s->pos += 2 * g->node[g->perm[p + l]].hlen;
               }
            }
            s->cost = g->Cost(external, s->pos);
         }
         else
         {
            m += (1u << k) - 1;
         }
      }
      node[k] += (1u << n) - (2u << k);
   }

   // Find optimal permutation of the n nodes.
   Optimize(0, n);

   // Apply permutation to original graph.
   for (uint i = 0; i < n; i++)
   {
      g->Swap(p + i, p + best[i]);
      for (uint j = i + 1; j < n; j++)
      {
         if (best[j] == i)
         {
            best[j] = best[i];
         }
      }
   }
}


/////////

// Constructor.
Graph::Graph(uint level) : level(level)
{
   node.push_back(Node(-1, 0, 1, Node::null));
   adj.push_back(Node::null);
   weight.push_back(0);
   bond.push_back(0);
}

// Insert node.
Node::Index Graph::Insert(Float length)
{
   Node::Index p = node.size();
   perm.push_back(p);
   node.push_back(Node(-1, length));
   return p;
}

// Insert arc (i, j).
Arc::Index Graph::Insert(Node::Index i, Node::Index j, Float w, Float b)
{
   for (Node::Index k = i - 1; node[k].arc == Arc::null; k--)
   {
      node[k].arc = adj.size();
   }
   adj.push_back(j);
   weight.push_back(w);
   bond.push_back(b);
   node[i].arc = adj.size();
   return adj.size() - 1;
}

// Remove edge {i, j}.
void Graph::Remove(Node::Index i, Node::Index j)
{
   // Remove (i, j).
   Arc::Index a = Find(i, j);
   adj.erase(adj.begin() + a);
   weight.erase(weight.begin() + a);
   bond.erase(bond.begin() + a);
   for (Node::Index k = i; k < node.size(); k++)
   {
      node[k].arc--;
   }
   // Remove (j, i).
   Arc::Index b = Find(j, i);
   adj.erase(adj.begin() + b);
   weight.erase(weight.begin() + b);
   bond.erase(bond.begin() + b);
   for (Node::Index k = j; k < node.size(); k++)
   {
      node[k].arc--;
   }
}

// Find arc (i, j).
Arc::Index Graph::Find(Node::Index i, Node::Index j) const
{
   for (Arc::Index a = begin(i); a < end(i); a++)
   {
      if (adj[a] == j)
      {
         return a;
      }
   }
   return Arc::null;
}

// Return source node i in arc a = (i, j).
Node::Index Graph::Source(Arc::Index a) const
{
   Node::Index j = adj[a];
   for (Arc::Index b = begin(j); b < end(j); b++)
   {
      Node::Index i = adj[b];
      if (begin(i) <= a && a < end(i))
      {
         return i;
      }
   }
   // should never get here
   throw std::runtime_error("internal data structure corrupted");
}

// Return reverse arc (j, i) of arc a = (i, j).
Arc::Index Graph::Reverse(Arc::Index a) const
{
   Node::Index j = adj[a];
   for (Arc::Index b = begin(j); b < end(j); b++)
   {
      Node::Index i = adj[b];
      if (begin(i) <= a && a < end(i))
      {
         return b;
      }
   }
   return Arc::null;
}

// Find first directed arc if one exists.
bool Graph::Directed(Node::Index* ip, Node::Index* jp) const
{
   for (Node::Index j = 1; j < node.size(); j++)
   {
      for (Arc::Index a = begin(j); a < end(j); a++)
      {
         Node::Index i = adj[a];
         if (!Find(i, j))
         {
            if (ip)
            {
               *ip = i;
            }
            if (jp)
            {
               *jp = j;
            }
            return true;
         }
      }
   }
   return false;
}

// Add contribution of fine arc to coarse graph.
void Graph::Update(Node::Index i, Node::Index j, Float w, Float b)
{
   Arc::Index a = Find(i, j);
   if (a == Arc::null)
   {
      Insert(i, j, w, b);
   }
   else
   {
      weight[a] += w;
      bond[a] += b;
   }
}

// Transfer contribution of fine arc a to coarse node p.
void Graph::Transfer(Graph* g, const vector<Float>& part, Node::Index p,
                     Arc::Index a, Float f) const
{
   Float w = f * weight[a];
   Float m = f * bond[a];
   Node::Index j = Target(a);
   Node::Index q = node[j].parent;
   if (q == Node::null)
   {
      for (Arc::Index b = begin(j); b < end(j); b++)
      {
         if (part[b] > 0)
         {
            q = node[adj[b]].parent;
            if (q != p)
            {
               g->Update(p, q, w * part[b], m * part[b]);
            }
         }
      }
   }
   else
   {
      g->Update(p, q, w, m);
   }
}

// Compute cost of a subset of arcs incident on node placed at pos.
WeightedSum Graph::Cost(const vector<Arc::Index>& subset, Float pos) const
{
   WeightedSum c;
   for (Arc::ConstPtr ap = subset.begin(); ap != subset.end(); ap++)
   {
      Arc::Index a = *ap;
      Node::Index j = Target(a);
      Float l = fabs(node[j].pos - pos);
      Float w = weight[a];
      functional->Accumulate(c, WeightedValue(l, w));
   }
   return c;
}

// Compute cost of graph layout.
Float Graph::Cost() const
{
   WeightedSum c;
   Node::Index i = 1;
   for (Arc::Index a = 1; a < adj.size(); a++)
   {
      while (end(i) <= a)
      {
         i++;
      }
      Node::Index j = Target(a);
      Float l = Length(i, j);
      Float w = weight[a];
      functional->Accumulate(c, WeightedValue(l, w));
   }
   return functional->Mean(c);
}

// Swap the two nodes in positions k and l, k <= l.
void Graph::Swap(uint k, uint l)
{
   Node::Index i = perm[k];
   perm[k] = perm[l];
   perm[l] = i;
   Float p = node[i].pos - node[i].hlen;
   do
   {
      i = perm[k];
      p += node[i].hlen;
      node[i].pos = p;
      p += node[i].hlen;
   }
   while (k++ != l);
}

// Optimize continuous position of a single node.
Float Graph::Optimal(Node::Index i) const
{
   vector<WeightedValue> v;
   for (Arc::Index a = begin(i); a < end(i); a++)
   {
      Node::Index j = adj[a];
      if (Placed(j))
      {
         v.push_back(WeightedValue(node[j].pos, weight[a]));
      }
   }
   return v.empty() ? -1 : functional->Optimum(v);
}

// Compute coarse graph with roughly half the number of nodes.
Graph* Graph::Coarsen()
{
   progress->BeginPhase(this, string("coarse"));
   Graph* g = new Graph(level - 1);
   g->functional = functional;
   g->progress = progress;

   // Compute importance of nodes in fine graph.
   mfem::DynamicHeap<Node::Index, Float> heap;
   for (Node::Index i = 1; i < node.size(); i++)
   {
      node[i].parent = Node::null;
      Float w = 0;
      for (Arc::Index a = begin(i); a < end(i); a++)
      {
         w += bond[a];
      }
      heap.Insert(i, w);
   }

   // Select set of important nodes from fine graph that will remain in
   // coarse graph.
   vector<Node::Index> child(1, Node::null);
   while (!heap.Empty())
   {
      Node::Index i;
      Float w = 0;
      heap.Extract(i, w);
      if (w < 0)
      {
         break;
      }
      child.push_back(i);
      node[i].parent = g->Insert(2 * node[i].hlen);

      // Reduce importance of neighbors.
      for (Arc::Index a = begin(i); a < end(i); a++)
      {
         Node::Index j = adj[a];
         if (heap.Find(j, w))
         {
            heap.Update(j, w - 2 * bond[a]);
         }
      }
   }

   // Assign parts of remaining nodes to aggregates.
   vector<Float> part = bond;
   for (Node::Index i = 1; i < node.size(); i++)
   {
      if (!Persistent(i))
      {
         // Find all connections to coarse nodes.
         Float w = 0;
         Float max = 0;
         for (Arc::Index a = begin(i); a < end(i); a++)
         {
            Node::Index j = adj[a];
            if (Persistent(j))
            {
               w += part[a];
               if (max < part[a])
               {
                  max = part[a];
               }
            }
            else
            {
               part[a] = -1;
            }
         }
         max /= GECKO_PART_FRAC;

         // Weed out insignificant connections.
         for (Arc::Index a = begin(i); a < end(i); a++)
         {
            if (0 < part[a] && part[a] < max)
            {
               w -= part[a];
               part[a] = -1;
            }
         }

         // Compute node fractions (interpolation matrix) and assign
         // partial nodes to aggregates.
         for (Arc::Index a = begin(i); a < end(i); a++)
         {
            if (part[a] > 0)
            {
               part[a] /= w;
               Node::Index p = node[adj[a]].parent;
               g->node[p].hlen += part[a] * node[i].hlen;
            }
         }
      }
   }

   // Transfer arcs to coarse graph.
   for (Node::Index p = 1; p < g->node.size(); p++)
   {
      Node::Index i = child[p];
      for (Arc::Index a = begin(i); a < end(i); a++)
      {
         Transfer(g, part, p, a);
         Node::Index j = adj[a];
         if (!Persistent(j))
         {
            Arc::Index b = Find(j, i);
            if (part[b] > 0)
            {
               for (Arc::Index c = begin(j); c < end(j); c++)
               {
                  Node::Index k = adj[c];
                  if (k != i)
                  {
                     Transfer(g, part, p, c, part[b]);
                  }
               }
            }
         }
      }
   }

#if DEBUG
   if (g->Directed())
   {
      throw runtime_error("directed edge found");
   }
#endif

   // Free memory.
   vector<Float> t = bond;
   bond.swap(t);

   progress->EndPhase(this, false);

   return g;
}

// Order nodes according to coarsened graph layout.
void Graph::Refine(const Graph* graph)
{
   progress->BeginPhase(this, string("refine"));

   // Place persistent nodes.
   mfem::DynamicHeap<Node::Index, Float> heap;
   for (Node::Index i = 1; i < node.size(); i++)
   {
      if (Persistent(i))
      {
         Node::Index p = node[i].parent;
         node[i].pos = graph->node[p].pos;
      }
      else
      {
         node[i].pos = -1;
         Float w = 0;
         for (Arc::Index a = begin(i); a < end(i); a++)
         {
            Node::Index j = adj[a];
            if (Persistent(j))
            {
               w += weight[a];
            }
         }
         heap.Insert(i, w);
      }
   }

   // Place remaining nodes in order of decreasing connectivity with
   // already placed nodes.
   while (!heap.Empty())
   {
      Node::Index i = 0;
      heap.Extract(i);
      node[i].pos = Optimal(i);
      for (Arc::Index a = begin(i); a < end(i); a++)
      {
         Node::Index j = adj[a];
         Float w;
         if (heap.Find(j, w))
         {
            heap.Update(j, w + weight[a]);
         }
      }
   }

   Place(true);
   progress->EndPhase(this, true);
}

// Perform m sweeps of compatible or Gauss-Seidel relaxation.
void Graph::Relax(bool compatible, uint m)
{
   progress->BeginPhase(this, compatible ? string("crelax") : string("frelax"));
   while (m--)
   {
      for (uint k = 0; k < perm.size() && !progress->Quit(); k++)
      {
         Node::Index i = perm[k];
         if (!compatible || !Persistent(i))
         {
            node[i].pos = Optimal(i);
         }
      }
   }
   Place(true);
   progress->EndPhase(this, true);
}

// Optimize successive n-node subgraphs.
void Graph::Optimize(uint n)
{
   if (n > perm.size())
   {
      n = perm.size();
   }
   ostringstream count;
   count << setw(2) << n;
   progress->BeginPhase(this, string("perm") + count.str());
   Subgraph* subgraph = new Subgraph(this, n);
   for (uint k = 0; k <= perm.size() - n && !progress->Quit(); k++)
   {
      subgraph->Optimize(k);
   }
   delete subgraph;
   progress->EndPhase(this, true);
}

// Place all nodes according to their positions.
void Graph::Place(bool sort)
{
   Place(sort, 0, perm.size());
}

// Place nodes {k, ..., k + n - 1} according to their positions.
void Graph::Place(bool sort, uint k, uint n)
{
   // Place nodes.
   if (sort)
   {
      stable_sort(perm.begin() + k, perm.begin() + k + n,
                  Node::Comparator(node.begin()));
   }

   // Assign node positions according to permutation.
   for (Float p = k ? node[perm[k - 1]].pos + node[perm[k - 1]].hlen : 0; n--;
        k++)
   {
      Node::Index i = perm[k];
      p += node[i].hlen;
      node[i].pos = p;
      p += node[i].hlen;
   }
}

// Perform one V-cycle.
void Graph::VCycle(uint n, uint work)
{
   if (n < Nodes() && Nodes() < Edges() && level && !progress->Quit())
   {
      Graph* graph = Coarsen();
      graph->VCycle(n, work + Edges());
      Refine(graph);
      delete graph;
   }
   else
   {
      Place();
   }
   if (Edges())
   {
      Relax(true, GECKO_CR_SWEEPS);
      Relax(false, GECKO_GS_SWEEPS);
      for (uint w = Edges(); w * (n + 1) < work; w *= ++n);
      n = std::min(n, uint(GECKO_WINDOW_MAX));
      if (n)
      {
         Optimize(n);
      }
   }
}

// Generate a random permutation of the nodes.
void Graph::Shuffle(uint seed)
{
   srand(seed);
   for (uint k = 0; k < perm.size(); k++)
   {
      uint l = (k + rand()) % Nodes();
      std::swap(perm[k], perm[l]);
   }
   Place();
}

// Recompute bonds for k'th V-cycle.
void Graph::Reweight(uint k)
{
   bond.resize(weight.size());
   for (Arc::Index a = 1; a < adj.size(); a++)
   {
      bond[a] = functional->Bond(weight[a], Length(a), k);
   }
}

// Linearly order graph.
void Graph::Order(Functional* functional, uint iterations, uint window,
                  uint period, uint seed, Progress* progress)
{
   // Initialize graph.
   this->functional = functional;
   this->progress = progress ? progress : new Progress;
   if (period == 0)
   {
      period--;
   }
   for (level = 0; (1u << level) < Nodes(); level++);
   Place();
   Float mincost = Cost();
   vector<Node::Index> minperm = perm;
   if (seed)
   {
      Shuffle(seed);
   }

   // Perform specified number of V-cycles.
   this->progress->BeginOrder(this, mincost);
   for (uint k = 1;
        k <= iterations && !this->progress->Quit();
        window += k % period ? 0 : 1, k++)
   {
      this->progress->BeginIter(this, k, iterations, window);
      Reweight(k);
      VCycle(window);
      Float c = Cost();
      if (c < mincost)
      {
         mincost = c;
         minperm = perm;
      }
      this->progress->EndIter(this, mincost, c);
   }
   perm = minperm;
   Place();
   this->progress->EndOrder(this, mincost);

   if (!progress)
   {
      delete this->progress;
   }
}

} // namespace gecko
